{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { createCache } from \"../utils\";\nvar CACHE_SIZE = 50;\nvar imageDimensionsCache = createCache(CACHE_SIZE);\n\nvar useImageDimensions = function useImageDimensions(image) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      dimensions = _useState2[0],\n      setDimensions = _useState2[1];\n\n  var getImageDimensions = function getImageDimensions(image) {\n    return new Promise(function (resolve) {\n      if (typeof image == \"number\") {\n        var cacheKey = \"\" + image;\n        var imageDimensions = imageDimensionsCache.get(cacheKey);\n\n        if (!imageDimensions) {\n          var _Image$resolveAssetSo = Image.resolveAssetSource(image),\n              width = _Image$resolveAssetSo.width,\n              height = _Image$resolveAssetSo.height;\n\n          imageDimensions = {\n            width: width,\n            height: height\n          };\n          imageDimensionsCache.set(cacheKey, imageDimensions);\n        }\n\n        resolve(imageDimensions);\n        return;\n      }\n\n      if (image.uri) {\n        var source = image;\n        var _cacheKey = source.uri;\n\n        var _imageDimensions = imageDimensionsCache.get(_cacheKey);\n\n        if (_imageDimensions) {\n          resolve(_imageDimensions);\n        } else {\n          Image.getSizeWithHeaders(source.uri, source.headers, function (width, height) {\n            imageDimensionsCache.set(_cacheKey, {\n              width: width,\n              height: height\n            });\n            resolve({\n              width: width,\n              height: height\n            });\n          }, function () {\n            resolve({\n              width: 0,\n              height: 0\n            });\n          });\n        }\n      } else {\n        resolve({\n          width: 0,\n          height: 0\n        });\n      }\n    });\n  };\n\n  var isImageUnmounted = false;\n  useEffect(function () {\n    getImageDimensions(image).then(function (dimensions) {\n      if (!isImageUnmounted) {\n        setDimensions(dimensions);\n      }\n    });\n    return function () {\n      isImageUnmounted = true;\n    };\n  }, [image]);\n  return dimensions;\n};\n\nexport default useImageDimensions;","map":{"version":3,"sources":["X:/SIH/Meri-Sadak/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js"],"names":["useEffect","useState","createCache","CACHE_SIZE","imageDimensionsCache","useImageDimensions","image","dimensions","setDimensions","getImageDimensions","Promise","resolve","cacheKey","imageDimensions","get","Image","resolveAssetSource","width","height","set","uri","source","getSizeWithHeaders","headers","isImageUnmounted","then"],"mappings":";AAOA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,WAAT;AACA,IAAMC,UAAU,GAAG,EAAnB;AACA,IAAMC,oBAAoB,GAAGF,WAAW,CAACC,UAAD,CAAxC;;AACA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AAAA,kBACEL,QAAQ,CAAC,IAAD,CADV;AAAA;AAAA,MAC3BM,UAD2B;AAAA,MACfC,aADe;;AAElC,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACH,KAAD,EAAW;AAClC,WAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5B,UAAI,OAAOL,KAAP,IAAgB,QAApB,EAA8B;AAC1B,YAAMM,QAAQ,QAAMN,KAApB;AACA,YAAIO,eAAe,GAAGT,oBAAoB,CAACU,GAArB,CAAyBF,QAAzB,CAAtB;;AACA,YAAI,CAACC,eAAL,EAAsB;AAAA,sCACQE,KAAK,CAACC,kBAAN,CAAyBV,KAAzB,CADR;AAAA,cACVW,KADU,yBACVA,KADU;AAAA,cACHC,MADG,yBACHA,MADG;;AAElBL,UAAAA,eAAe,GAAG;AAAEI,YAAAA,KAAK,EAALA,KAAF;AAASC,YAAAA,MAAM,EAANA;AAAT,WAAlB;AACAd,UAAAA,oBAAoB,CAACe,GAArB,CAAyBP,QAAzB,EAAmCC,eAAnC;AACH;;AACDF,QAAAA,OAAO,CAACE,eAAD,CAAP;AACA;AACH;;AAED,UAAIP,KAAK,CAACc,GAAV,EAAe;AACX,YAAMC,MAAM,GAAGf,KAAf;AACA,YAAMM,SAAQ,GAAGS,MAAM,CAACD,GAAxB;;AACA,YAAMP,gBAAe,GAAGT,oBAAoB,CAACU,GAArB,CAAyBF,SAAzB,CAAxB;;AACA,YAAIC,gBAAJ,EAAqB;AACjBF,UAAAA,OAAO,CAACE,gBAAD,CAAP;AACH,SAFD,MAGK;AAEDE,UAAAA,KAAK,CAACO,kBAAN,CAAyBD,MAAM,CAACD,GAAhC,EAAqCC,MAAM,CAACE,OAA5C,EAAqD,UAACN,KAAD,EAAQC,MAAR,EAAmB;AACpEd,YAAAA,oBAAoB,CAACe,GAArB,CAAyBP,SAAzB,EAAmC;AAAEK,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,MAAM,EAANA;AAAT,aAAnC;AACAP,YAAAA,OAAO,CAAC;AAAEM,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,MAAM,EAANA;AAAT,aAAD,CAAP;AACH,WAHD,EAGG,YAAM;AACLP,YAAAA,OAAO,CAAC;AAAEM,cAAAA,KAAK,EAAE,CAAT;AAAYC,cAAAA,MAAM,EAAE;AAApB,aAAD,CAAP;AACH,WALD;AAMH;AACJ,OAhBD,MAiBK;AACDP,QAAAA,OAAO,CAAC;AAAEM,UAAAA,KAAK,EAAE,CAAT;AAAYC,UAAAA,MAAM,EAAE;AAApB,SAAD,CAAP;AACH;AACJ,KAjCM,CAAP;AAkCH,GAnCD;;AAoCA,MAAIM,gBAAgB,GAAG,KAAvB;AACAxB,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,kBAAkB,CAACH,KAAD,CAAlB,CAA0BmB,IAA1B,CAA+B,UAAClB,UAAD,EAAgB;AAC3C,UAAI,CAACiB,gBAAL,EAAuB;AACnBhB,QAAAA,aAAa,CAACD,UAAD,CAAb;AACH;AACJ,KAJD;AAKA,WAAO,YAAM;AACTiB,MAAAA,gBAAgB,GAAG,IAAnB;AACH,KAFD;AAGH,GATQ,EASN,CAAClB,KAAD,CATM,CAAT;AAUA,SAAOC,UAAP;AACH,CAlDD;;AAmDA,eAAeF,kBAAf","sourcesContent":["/**\n * Copyright (c) JOB TODAY S.A. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect, useState } from \"react\";\nimport { Image } from \"react-native\";\nimport { createCache } from \"../utils\";\nconst CACHE_SIZE = 50;\nconst imageDimensionsCache = createCache(CACHE_SIZE);\nconst useImageDimensions = (image) => {\n    const [dimensions, setDimensions] = useState(null);\n    const getImageDimensions = (image) => {\n        return new Promise((resolve) => {\n            if (typeof image == \"number\") {\n                const cacheKey = `${image}`;\n                let imageDimensions = imageDimensionsCache.get(cacheKey);\n                if (!imageDimensions) {\n                    const { width, height } = Image.resolveAssetSource(image);\n                    imageDimensions = { width, height };\n                    imageDimensionsCache.set(cacheKey, imageDimensions);\n                }\n                resolve(imageDimensions);\n                return;\n            }\n            // @ts-ignore\n            if (image.uri) {\n                const source = image;\n                const cacheKey = source.uri;\n                const imageDimensions = imageDimensionsCache.get(cacheKey);\n                if (imageDimensions) {\n                    resolve(imageDimensions);\n                }\n                else {\n                    // @ts-ignore\n                    Image.getSizeWithHeaders(source.uri, source.headers, (width, height) => {\n                        imageDimensionsCache.set(cacheKey, { width, height });\n                        resolve({ width, height });\n                    }, () => {\n                        resolve({ width: 0, height: 0 });\n                    });\n                }\n            }\n            else {\n                resolve({ width: 0, height: 0 });\n            }\n        });\n    };\n    let isImageUnmounted = false;\n    useEffect(() => {\n        getImageDimensions(image).then((dimensions) => {\n            if (!isImageUnmounted) {\n                setDimensions(dimensions);\n            }\n        });\n        return () => {\n            isImageUnmounted = true;\n        };\n    }, [image]);\n    return dimensions;\n};\nexport default useImageDimensions;\n"]},"metadata":{},"sourceType":"module"}