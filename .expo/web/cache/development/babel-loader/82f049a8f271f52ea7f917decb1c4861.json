{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"X:\\\\SIH\\\\Meri-Sadak\\\\node_modules\\\\react-native-image-gallery\\\\src\\\\libraries\\\\TransformableImage\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport PropTypes from 'prop-types';\nimport ViewTransformer from \"../ViewTransformer\";\n\nvar TransformableImage = function (_PureComponent) {\n  _inherits(TransformableImage, _PureComponent);\n\n  var _super = _createSuper(TransformableImage);\n\n  function TransformableImage(props) {\n    var _this;\n\n    _classCallCheck(this, TransformableImage);\n\n    _this = _super.call(this, props);\n    _this.onLayout = _this.onLayout.bind(_assertThisInitialized(_this));\n    _this.onLoad = _this.onLoad.bind(_assertThisInitialized(_this));\n    _this.onLoadStart = _this.onLoadStart.bind(_assertThisInitialized(_this));\n    _this.getViewTransformerInstance = _this.getViewTransformerInstance.bind(_assertThisInitialized(_this));\n    _this.renderError = _this.renderError.bind(_assertThisInitialized(_this));\n    _this.state = {\n      viewWidth: 0,\n      viewHeight: 0,\n      imageLoaded: false,\n      imageDimensions: props.image.dimensions,\n      keyAcumulator: 1\n    };\n    return _this;\n  }\n\n  _createClass(TransformableImage, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (!this.state.imageDimensions) {\n        this.getImageSize(this.props.image);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._mounted = true;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (!sameImage(this.props.image, nextProps.image)) {\n        this.setState({\n          imageDimensions: nextProps.image.dimensions,\n          keyAcumulator: this.state.keyAcumulator + 1\n        });\n\n        if (!nextProps.image.dimensions) {\n          this.getImageSize(nextProps.image);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._mounted = false;\n    }\n  }, {\n    key: \"onLoadStart\",\n    value: function onLoadStart(e) {\n      this.props.onLoadStart && this.props.onLoadStart(e);\n\n      if (this.state.imageLoaded) {\n        this.setState({\n          imageLoaded: false\n        });\n      }\n    }\n  }, {\n    key: \"onLoad\",\n    value: function onLoad(e) {\n      this.props.onLoad && this.props.onLoad(e);\n\n      if (!this.state.imageLoaded) {\n        this.setState({\n          imageLoaded: true\n        });\n      }\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          width = _e$nativeEvent$layout.width,\n          height = _e$nativeEvent$layout.height;\n\n      if (this.state.viewWidth !== width || this.state.viewHeight !== height) {\n        this.setState({\n          viewWidth: width,\n          viewHeight: height\n        });\n      }\n    }\n  }, {\n    key: \"getImageSize\",\n    value: function getImageSize(image) {\n      var _this2 = this;\n\n      if (!image) {\n        return;\n      }\n\n      var source = image.source,\n          dimensions = image.dimensions;\n\n      if (dimensions) {\n        this.setState({\n          imageDimensions: dimensions\n        });\n        return;\n      }\n\n      if (source && source.uri) {\n        Image.getSize(source.uri, function (width, height) {\n          if (width && height) {\n            if (_this2.state.imageDimensions && _this2.state.imageDimensions.width === width && _this2.state.imageDimensions.height === height) {} else {\n              _this2._mounted && _this2.setState({\n                imageDimensions: {\n                  width: width,\n                  height: height\n                }\n              });\n            }\n          }\n        }, function () {\n          _this2._mounted && _this2.setState({\n            error: true\n          });\n        });\n      } else {\n        console.warn('react-native-image-gallery', 'Please provide dimensions of your local images');\n      }\n    }\n  }, {\n    key: \"getViewTransformerInstance\",\n    value: function getViewTransformerInstance() {\n      return this.refs['viewTransformer'];\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError() {\n      return this.props.errorComponent && this.props.errorComponent() || React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: 'black',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: 'white',\n          fontSize: 15,\n          fontStyle: 'italic'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 18\n        }\n      }, \"This image cannot be displayed...\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          imageDimensions = _this$state.imageDimensions,\n          viewWidth = _this$state.viewWidth,\n          viewHeight = _this$state.viewHeight,\n          error = _this$state.error,\n          keyAccumulator = _this$state.keyAccumulator,\n          imageLoaded = _this$state.imageLoaded;\n      var _this$props = this.props,\n          style = _this$props.style,\n          image = _this$props.image,\n          imageComponent = _this$props.imageComponent,\n          resizeMode = _this$props.resizeMode,\n          enableTransform = _this$props.enableTransform,\n          enableScale = _this$props.enableScale,\n          enableTranslate = _this$props.enableTranslate,\n          onTransformGestureReleased = _this$props.onTransformGestureReleased,\n          onViewTransformed = _this$props.onViewTransformed;\n      var maxScale = 1;\n      var contentAspectRatio;\n      var width, height;\n\n      if (imageDimensions) {\n        width = imageDimensions.width;\n        height = imageDimensions.height;\n      }\n\n      if (width && height) {\n        contentAspectRatio = width / height;\n\n        if (viewWidth && viewHeight) {\n          maxScale = Math.max(width / viewWidth, height / viewHeight);\n          maxScale = Math.max(1, maxScale);\n        }\n      }\n\n      var imageProps = _objectSpread(_objectSpread({}, this.props), {}, {\n        imageLoaded: imageLoaded,\n        source: image.source,\n        style: [style, {\n          backgroundColor: 'transparent'\n        }],\n        resizeMode: resizeMode,\n        onLoadStart: this.onLoadStart,\n        onLoad: this.onLoad,\n        capInsets: {\n          left: 0.1,\n          top: 0.1,\n          right: 0.1,\n          bottom: 0.1\n        }\n      });\n\n      var content = imageComponent ? imageComponent(imageProps, imageDimensions) : React.createElement(Image, _extends({}, imageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 88\n        }\n      }));\n      return React.createElement(ViewTransformer, {\n        ref: 'viewTransformer',\n        key: 'viewTransformer#' + keyAccumulator,\n        enableTransform: enableTransform && imageLoaded,\n        enableScale: enableScale,\n        enableTranslate: enableTranslate,\n        enableResistance: true,\n        onTransformGestureReleased: onTransformGestureReleased,\n        onViewTransformed: onViewTransformed,\n        maxScale: maxScale,\n        contentAspectRatio: contentAspectRatio,\n        onLayout: this.onLayout,\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }\n      }, error ? this.renderError() : content);\n    }\n  }]);\n\n  return TransformableImage;\n}(PureComponent);\n\nTransformableImage.propTypes = {\n  image: PropTypes.shape({\n    source: PropTypes.oneOfType([PropTypes.object, PropTypes.number]).isRequired,\n    dimensions: PropTypes.shape({\n      width: PropTypes.number,\n      height: PropTypes.number\n    })\n  }).isRequired,\n  style: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,\n  onLoad: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  enableTransform: PropTypes.bool,\n  enableScale: PropTypes.bool,\n  enableTranslate: PropTypes.bool,\n  onTransformGestureReleased: PropTypes.func,\n  onViewTransformed: PropTypes.func,\n  imageComponent: PropTypes.func,\n  resizeMode: PropTypes.string,\n  errorComponent: PropTypes.func\n};\nTransformableImage.defaultProps = {\n  enableTransform: true,\n  enableScale: true,\n  enableTranslate: true,\n  imageComponent: undefined,\n  resizeMode: 'contain'\n};\nexport { TransformableImage as default };\n\nfunction sameImage(source, nextSource) {\n  if (source === nextSource) {\n    return true;\n  }\n\n  if (source && nextSource) {\n    if (source.uri && nextSource.uri) {\n      return source.uri === nextSource.uri;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["X:/SIH/Meri-Sadak/node_modules/react-native-image-gallery/src/libraries/TransformableImage/index.js"],"names":["React","PureComponent","PropTypes","ViewTransformer","TransformableImage","props","onLayout","bind","onLoad","onLoadStart","getViewTransformerInstance","renderError","state","viewWidth","viewHeight","imageLoaded","imageDimensions","image","dimensions","keyAcumulator","getImageSize","_mounted","nextProps","sameImage","setState","e","nativeEvent","layout","width","height","source","uri","Image","getSize","error","console","warn","refs","errorComponent","flex","backgroundColor","alignItems","justifyContent","color","fontSize","fontStyle","keyAccumulator","style","imageComponent","resizeMode","enableTransform","enableScale","enableTranslate","onTransformGestureReleased","onViewTransformed","maxScale","contentAspectRatio","Math","max","imageProps","capInsets","left","top","right","bottom","content","propTypes","shape","oneOfType","object","number","isRequired","ViewPropTypes","View","func","bool","string","defaultProps","undefined","nextSource"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { View, Text, Image, ViewPropTypes } from 'react-native';\nimport PropTypes from 'prop-types';\nimport ViewTransformer from '../ViewTransformer';\n\nexport default class TransformableImage extends PureComponent {\n    static propTypes = {\n        image: PropTypes.shape({\n            source: PropTypes.oneOfType([\n                PropTypes.object,\n                PropTypes.number\n            ]).isRequired,\n            dimensions: PropTypes.shape({ width: PropTypes.number, height: PropTypes.number })\n        }).isRequired,\n        style: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,\n        onLoad: PropTypes.func,\n        onLoadStart: PropTypes.func,\n        enableTransform: PropTypes.bool,\n        enableScale: PropTypes.bool,\n        enableTranslate: PropTypes.bool,\n        onTransformGestureReleased: PropTypes.func,\n        onViewTransformed: PropTypes.func,\n        imageComponent: PropTypes.func,\n        resizeMode: PropTypes.string,\n        errorComponent: PropTypes.func\n    };\n\n    static defaultProps = {\n        enableTransform: true,\n        enableScale: true,\n        enableTranslate: true,\n        imageComponent: undefined,\n        resizeMode: 'contain'\n    };\n\n    constructor (props) {\n        super(props);\n\n        this.onLayout = this.onLayout.bind(this);\n        this.onLoad = this.onLoad.bind(this);\n        this.onLoadStart = this.onLoadStart.bind(this);\n        this.getViewTransformerInstance = this.getViewTransformerInstance.bind(this);\n        this.renderError = this.renderError.bind(this);\n\n        this.state = {\n            viewWidth: 0,\n            viewHeight: 0,\n            imageLoaded: false,\n            imageDimensions: props.image.dimensions,\n            keyAcumulator: 1\n        };\n    }\n\n    componentWillMount () {\n        if (!this.state.imageDimensions) {\n            this.getImageSize(this.props.image);\n        }\n    }\n\n    componentDidMount () {\n        this._mounted = true;\n    }\n\n    componentWillReceiveProps (nextProps) {\n        if (!sameImage(this.props.image, nextProps.image)) {\n            // image source changed, clear last image's imageDimensions info if any\n            this.setState({ imageDimensions: nextProps.image.dimensions, keyAcumulator: this.state.keyAcumulator + 1 });\n            if (!nextProps.image.dimensions) { // if we don't have image dimensions provided in source\n                this.getImageSize(nextProps.image);\n            }\n        }\n    }\n\n    componentWillUnmount () {\n        this._mounted = false;\n    }\n\n    onLoadStart (e) {\n        this.props.onLoadStart && this.props.onLoadStart(e);\n        if (this.state.imageLoaded) {\n            this.setState({ imageLoaded: false });\n        }\n    }\n\n    onLoad (e) {\n        this.props.onLoad && this.props.onLoad(e);\n        if (!this.state.imageLoaded) {\n            this.setState({ imageLoaded: true });\n        }\n    }\n\n    onLayout (e) {\n        let {width, height} = e.nativeEvent.layout;\n        if (this.state.viewWidth !== width || this.state.viewHeight !== height) {\n            this.setState({ viewWidth: width, viewHeight: height });\n        }\n    }\n\n    getImageSize (image) {\n        if (!image) {\n            return;\n        }\n        const { source, dimensions } = image;\n\n        if (dimensions) {\n            this.setState({ imageDimensions: dimensions });\n            return;\n        }\n\n        if (source && source.uri) {\n            Image.getSize(\n                source.uri,\n                (width, height) => {\n                    if (width && height) {\n                        if (this.state.imageDimensions && this.state.imageDimensions.width === width && this.state.imageDimensions.height === height) {\n                            // no need to update state\n                        } else {\n                            this._mounted && this.setState({ imageDimensions: { width, height } });\n                        }\n                    }\n                },\n                () => {\n                    this._mounted && this.setState({ error: true });\n                }\n            );\n        } else {\n            console.warn('react-native-image-gallery', 'Please provide dimensions of your local images');\n        }\n    }\n\n    getViewTransformerInstance () {\n        return this.refs['viewTransformer'];\n    }\n\n    renderError () {\n        return (this.props.errorComponent && this.props.errorComponent()) || (\n            <View style={{ flex: 1, backgroundColor: 'black', alignItems: 'center', justifyContent: 'center' }}>\n                 <Text style={{ color: 'white', fontSize: 15, fontStyle: 'italic' }}>This image cannot be displayed...</Text>\n            </View>\n        );\n    }\n\n    render () {\n        const { imageDimensions, viewWidth, viewHeight, error, keyAccumulator, imageLoaded } = this.state;\n        const { style, image, imageComponent, resizeMode, enableTransform, enableScale, enableTranslate, onTransformGestureReleased, onViewTransformed } = this.props;\n\n        let maxScale = 1;\n        let contentAspectRatio;\n        let width, height; // imageDimensions\n\n        if (imageDimensions) {\n            width = imageDimensions.width;\n            height = imageDimensions.height;\n        }\n\n        if (width && height) {\n            contentAspectRatio = width / height;\n            if (viewWidth && viewHeight) {\n                maxScale = Math.max(width / viewWidth, height / viewHeight);\n                maxScale = Math.max(1, maxScale);\n            }\n        }\n\n        const imageProps = {\n            ...this.props,\n            imageLoaded,\n            source: image.source,\n            style: [style, { backgroundColor: 'transparent' }],\n            resizeMode: resizeMode,\n            onLoadStart: this.onLoadStart,\n            onLoad: this.onLoad,\n            capInsets: { left: 0.1, top: 0.1, right: 0.1, bottom: 0.1 }\n        };\n\n        const content = imageComponent ? imageComponent(imageProps, imageDimensions) : <Image { ...imageProps } />;\n\n        return (\n            <ViewTransformer\n              ref={'viewTransformer'}\n              key={'viewTransformer#' + keyAccumulator} // when image source changes, we should use a different node to avoid reusing previous transform state\n              enableTransform={enableTransform && imageLoaded} // disable transform until image is loaded\n              enableScale={enableScale}\n              enableTranslate={enableTranslate}\n              enableResistance={true}\n              onTransformGestureReleased={onTransformGestureReleased}\n              onViewTransformed={onViewTransformed}\n              maxScale={maxScale}\n              contentAspectRatio={contentAspectRatio}\n              onLayout={this.onLayout}\n              style={style}>\n                { error ? this.renderError() : content }\n            </ViewTransformer>\n        );\n    }\n}\n\nfunction sameImage (source, nextSource) {\n    if (source === nextSource) {\n        return true;\n    }\n    if (source && nextSource) {\n        if (source.uri && nextSource.uri) {\n            return source.uri === nextSource.uri;\n        }\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}